<args format='1.0' scope='/root' fixedCEL='/root' >
	<group name='imagineGlobalStatements' hideTitle='True' widget='pagedargs' closed='False' groupinherit='False'>
		<page name='general' open="True">
			<page name='light transport' open="False">
				<int name="integrator" widget="mapper" default="1">
					<hintdict name='options'>
						<int name="direct_illumination" value="0"/>
						<int name="path" value="1"/>
						<int name="path_distributed" value="2"/>
					</hintdict>
				</int>
				<int name="enable_ambient_occlusion" default="0" widget="checkBox" conditionalVisOp='equalTo' conditionalVisPath='../integrator' conditionalVisValue='0' help="Enable Ambient Occlusion shading with the Direct Lighting integrator."/>
				<int name="ambient_occlusion_samples" default="5" widget="default" conditionalVisOp='equalTo' conditionalVisPath='../integrator' conditionalVisValue='0' help="Number of Ambient Occlusion samples to use"/>
				<int name="path_dist_diffuse_multiplier" default="3" conditionalVisOp='equalTo' conditionalVisPath='../integrator' conditionalVisValue='2' help="Diffuse ray multiplier for the PathDistributed integrator"/>
				<int name="path_dist_glossy_multiplier" default="2" conditionalVisOp='equalTo' conditionalVisPath='../integrator' conditionalVisValue='2' help= "Glossy ray multiplier for the PathDistributed integrator"/>

				<int name="enable_volumetrics" default="0" widget="checkBox" help="Enable the Volumetrics integrator. Needed for SSS and volumes."/>
				<int name="use_mis" default="1" widget="checkBox" help="Enable use of MIS."/>

				<int name="evaluate_glossy" default="1" widget="checkBox"/>
				<int name="allow_indirect_caustics" default="0" widget="checkBox"/>
				<int name="russian_roulette" default="1" widget="checkBox"/>

				<int name="light_sampling" widget="mapper" default="0">
					<hintdict name='options'>
						<int name="Fully sample all lights" value="0"/>
						<int name="Importance sample lights (uniform)" value="1"/>
						<int name="Importance sample lights (weighted on samples)" value="2"/>
						<int name="Importance sample lights (weighted radiance)" value="3"/>
						<int name="Importance sample lights (weighted radiance) + localised" value="5"/>
					</hintdict>
				</int>
				<int name="light_samples" default="1" conditionalVisOp='notEqualTo' conditionalVisPath='../light_sampling' conditionalVisValue='0' help="The number of light samples to use per pixel sample."/>


				<int name="max_depth_overall" default="4" help="Maximum ray bounce count"/>
				<int name="max_depth_diffuse" default="3" help=""/>
				<int name="max_depth_glossy" default="3" help=""/>
				<int name="max_depth_reflection" default="5" help=""/>
				<int name="max_depth_refraction" default="5" help=""/>
			</page>

			<int name="adaptive" default="0" widget="checkBox" help="Use adaptive criteria within integrators for stopping when final pixel noise variance levels reach a certain threshold."/>
			<float name="adaptive_variance_threshold" default="0.05" conditionalVisOp='equalTo' conditionalVisPath='../adaptive' conditionalVisValue='1'/>


			<int name="spp" default="64" help="The overall number of samples per pixel. Perfect square numbers (49, 64, 144) will give slightly better sample stratification."/>
			<int name="iterations" default="1" help="The number of iteration passes to split the above samples into"/>

			<int name="fast_live_renders" default="0" widget="checkBox" help="Use a smaller number of samples per pixel for live renders, making each iteration much faster."/>

			<int name="reconstruction_filter" widget="mapper" default="3">
				<hintdict name='options'>
					<int name="box" value="0"/>
					<int name="triangle" value="1"/>
					<int name="gaussian" value="2"/>
					<int name="mitchell_netravali" value="3"/>
					<int name="blackman_harris" value="4"/>
					<int name="catmull-rom" value="5"/>
					<int name="lanczos-sync" value="6"/>
				</hintdict>
			</int>

			<int name="depth_of_field" default="0" widget="checkBox"/>
			<int name="motion_blur" default="0" widget="checkBox"/>
		</page>
		<page name='geometry' open="True">
			<int name="flip_t" default="0" widget="mapper" help="Flip the t (V) coordinate of st texture coordinates.">
				<hintdict name='options'>
					<int name="None" value="0"/>
					<int name="Full" value="1"/>
					<int name="Component-wise" value="2"/>
				</hintdict>
			</int>
			<int name="enable_subdivision" default="0" widget="checkBox" help="Enable using subdivision surfaces. With this off, subdmesh types will be interpreted as standard polygons."/>
		</page>
		<page name='scene' open="True">
			<int name="bake_down_scene" default="0" widget="checkBox" help="Whether to bake down the scene to one single acceleration structure. Build time is longer and uses more memory, and doesn't support instancing or transform motion blur, but intersection time can be drastically reduced when there are lots of overlapping objects."/>

			<int name="specialise_types" widget="mapper" default="0" help="Whether to detect certain locations and interpret them as Compound Objects. This can speed up rendering complex objects with overlapping geometry objects significantly.">
				<hintdict name='options'>
					<int name="off" value="0"/>
					<int name="assembly" value="1"/>
					<int name="component" value="2"/>
				</hintdict>
			</int>

			<int name="deduplicate_vertex_normals" default="0" widget="checkBox" help="de-duplicate per-vertex normals for meshes. Build time is longer (and peak memory is higher), but can reduce final memory usage significantly in some cases."/>
			<int name="use_geo_normals" default="1" widget="checkBox" help="Use normals from geo attributes"/>
			<int name="use_location_bounds" default="1" widget="checkBox" help="Use bound attributes from locations for bboxes. If turned off or no bound attribute exists, Imagine will calculate them."/>

			<int name="triangle_type" widget="mapper" default="0" help="Triangle type to use. Fast uses the 48-byte Shevtsov triangle intersection test which is very fast, but caches extra info, so requires 48 bytes per triangle. Compact uses the Moller intersection algorithm, which calculates everything on-the-fly, requiring 4/0 bytes per triangle. Compact is on average 30-65% slower than Fast.">
				<hintdict name='options'>
					<int name="Fast" value="0"/>
					<int name="Compact" value="1"/>
				</hintdict>
			</int>
			<int name="geometry_quantisation_type" widget="mapper" default="0" help="Geometry compression. Standard normal compresses 96-bit float normals to 32-bit normals. Standard UV compresses UV coords to a limited range of -10.0 - 10.0, but at constant accuracy across that range.">
				<hintdict name='options'>
					<int name="None" value="0"/>
					<int name="Standard normal" value="1"/>
					<int name="Standard normal, standard UV" value="2"/>
				</hintdict>
			</int>
			<int name="specialised_triangle_type" widget="mapper" default="0" help="Triangle type to use for specialised geometry types. Triangle Packets is fastest, but uses most memory (especially peak). Fast uses 48-byte trianges, compact uses 4/1/0 bytes per triangle depending on properties/attributes of shapes.">
				<hintdict name='options'>
					<int name="Triangle Packets" value="0"/>
					<int name="Fast" value="1"/>
					<int name="Compact" value="2"/>
				</hintdict>
			</int>
			<int name="scene_accel_structure" widget="mapper" default="1" help="Scene acceleration type to use. KDTree is generally faster for more sparse scenes with lots of empty space. For dense scenes with lots of overlapping objects, BVH can be significantly faster.">
				<hintdict name='options'>
					<int name="KDTree" value="0"/>
					<int name="BVH" value="1"/>
				</hintdict>
			</int>
			<float name="ray_epsilon" default="0.0001"/>
			<float name="shadow_ray_epsilon" default="0.0001"/>
		</page>

		<page name='advanced' open="False">
			<page name='texture_caching' open="False">
				<int name="texture_caching_type" default="1" widget="mapper">
					<hintdict name='options'>
						<int name="None" value="0"/>
						<int name="Global" value="1"/>
					</hintdict>
					<help>Type of image texture caching to use. None pre-loads textures before starting. Global uses lazy loading of textures in a global texture cache.
					It's highly recommended to use tiled mipmapped textures with this type of texture caching.
					</help>
				</int>
				<int name="texture_cache_max_size" default="4096" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1'>
					<help>Max texture cache size in MB.</help>
				</int>
				<int name="texture_cache_max_file_handles" default="744" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1'>
					<help>Max number of file handles active at once for reading image textures.</help>
				</int>
				<int name="texture_cache_cache_file_handles" default="1" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1' widget="checkBox">
					<help>Attempts to cache file handles to files on disk (network) if the file reader supports it.</help>
				</int>
				<int name="texture_cache_global_mipmap_bias" default="0" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1'>
					<help>Biases the mipmap level used for texture filtering. Negative values bias it to lower (bigger) mipmap levels.</help>
				</int>
				<int name="texture_tile_data_fix" default="0" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1' widget="mapper">
					<hintdict name='options'>
						<int name="None" value="0"/>
						<int name="Clamp min values to 0.0f" value="1"/>
						<int name="Clamp min values to 0.0f with warnings" value="2"/>
					</hintdict>
					<help>Type of data correction to do after reading tiled data from images. Sometimes images can have negative or NaN pixel values depending on the filter type used to create the mipmaps
					and any colourspace conversion done. Enabling this attempts to detect and fix these issues after reading the data.</help>
				</int>
				<int name="texture_delete_tile_items" default="0" conditionalVisOp='equalTo' conditionalVisPath='../texture_caching_type' conditionalVisValue='1' widget="checkBox">
					<help>When freeing existing tiles when the texture cache memory limit is reached delete the tile item as well as the pixel data for the tile. Turning this on has a very slight performance
						penalty and means it's not possible for Imagine to accurately track unique pixel data size in the stats, but reduces memory usage overhead very slightly.
					</help>
				</int>
			</page>

			<int name="statistics_type" default="1" widget="mapper">
				<hintdict name='options'>
					<int name="None" value="0"/>
					<int name="Simple" value="1"/>
					<int name="Full" value="2"/>
				</hintdict>
				<help>Type of statistics to use: Simple is very lightweight and just includes counters for ray types, bounces, BSDF evaluations, texture reads, etc.
					  Full adds time sampling of different parts of the rendering process to Simple, and adds a small but noticable (~3-5%) overhead of total render time.
				</help>
			</int>
			<int name="statistics_output_type" default="0" widget="mapper">
				<hintdict name='options'>
					<int name="Console" value="0"/>
					<int name="File" value="1"/>
				</hintdict>
			</int>
			<string name="statistics_output_path" default="" conditionalVisOp='equalTo' conditionalVisPath='../statistics_output_type' conditionalVisValue='1' widget="default"/>

			<int name="print_memory_statistics" default="1" widget="mapper">
				<hintdict name='options'>
					<int name="None" value="0"/>
					<int name="Normal" value="1"/>
					<int name="Verbose" value="2"/>
				</hintdict>
			</int>
			<int name="bucket_size" widget="mapper" default="48">
				<hintdict name='options'>
					<int name="16" value="16"/>
					<int name="32" value="32"/>
					<int name="48" value="48"/>
					<int name="64" value="64"/>
					<int name="96" value="96"/>
					<int name="128" value="128"/>
				</hintdict>
			</int>
			<int name="bucket_order" widget="mapper" default="4">
				<hintdict name='options'>
					<int name="horizontal rows" value="0"/>
					<int name="horizontal rows bounce" value="1"/>
					<int name="vertical rows" value="2"/>
					<int name="vertical rows bounce" value="3"/>
					<int name="spiral" value="4"/>
					<int name="horizontal spread" value="5"/>
					<int name="hilbert" value="6"/>
				</hintdict>
			</int>
			<int name="deterministic_samples" default="1" widget="mapper">
				<hintdict name='options'>
					<int name="off" value="0"/>
					<int name="frame deterministic" value="1"/>
					<int name="full deterministic" value="2"/>
				</hintdict>
			</int>
			<int name="decompose_xforms" default="0" widget="checkBox" help="When enabled, Imagine will attempt to decompose xform matrices used for motion blur. This doesn't always work (pivoted rotation, skew, shear), but otherwise provides accurate quaternion-based rotation with just two xform samples."/>
			<int name="debug_popup" default="0" widget="checkBox" help="Pops up xmessage box so debugger can be attached to renderboot."/>
			<int name="discard_geometry" default="0" widget="checkBox" help="Doesn't actually add geometry to Imagine. Useful for debugging Katana memory usage via renderboot."/>
		</page>

		<page name='camera' open="False">
			<int name="cam_projection_type" widget="mapper" default="0">
				<hintdict name='options'>
					<int name="automatic" value="0"/>
					<int name="perspective" value="1"/>
					<int name="spherical" value="2"/>
					<int name="orthographic" value="3"/>
					<int name="fisheye" value="4"/>
				</hintdict>
				<help>Type of camera projection to use. Automatic tries to determine this by using the geometry.projection attribute on the camera location itself.</help>
			</int>
			<float name="cam_focal_distance" default="16.0"/>
			<float name="cam_aperture_size" default="0.0"/>
			<int name="cam_aperture_type" widget="mapper" default="0">
				<hintdict name='options'>
					<int name="circle" value="0"/>
					<int name="polygon (blades)" value="1"/>
				</hintdict>
			</int>
			<int name="environment_visible" widget="checkBox" default="0"/>
			<int name="cam_use_near_clip" widget="checkBox" default="0"/>
		</page>
	</group>
</args>

